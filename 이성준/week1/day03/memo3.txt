day01

설치 sw
notepad++, everything, 반디집

자바 기본 과목 범위:
구문 ~ 상속, 인터페이스 -> 웹개발을 위한 자바
GUI, IO, Network -> 애플리케이션 개발을 위한 자바(목표-채팅서버,클라이언트)

마크다운 
```java 
~ 
```

C언어 : Process: 4가지영역(영역별 최대 1GB)
Code Segment
Data Segment
Heap
Stack

Java : 3가지영역
Method(Static, Class)Area
Heap
Stack
///////////////////////////

day02

메모리 자동관리기능은 Heap영역에만 적용

정올, 백준-- 코테대비
///////////////////////////

day03

OOP 3대특징
1. 캡슐화(EnCapsulation) - 객체의 중요한 속성을 감추는 것.	
(접근지정자 - private(같은 클래스), (생략)(같은 패키지), protected(같은패키지이거나 자식객체), public(아무패키지, 아무클래스))
	- 목적 : 잘못된 정보변경 방지
	- ex) 한국사람 h = 김길동;
	      h.주민번호 = 1212; 주민번호는 객체 생성할 때 선언가능하지만 중간에 바꾸지 못함.
		  
2. 상속성(Inheritance) - 다른 객체의 기능을 그대로 가져오는 것.
	- 목적 : 빠른 개발
	
3. 다형성(Polymorphism) - 한가지 타입의 변수에 여러가지 객체를 대입하는 것.
	- 목적 : 한개 변수를 다목적으로 사용(빠른 개발)
	- ex) 김씨 g = 김영환;
		  g = 김길동;
		
		  동물 d = 사자;
		  d = 개;

- 한 사람의 이름
String name = "김길동";

- 여러 사람의 이름 - 배열(같은 타입의 연속적인 변수 모음)
String[] names = {"김길동", "홍길동"};

- 여러 타입을 하나로 묶음 : 클래스
class Person{
		String name;
		int age;
}

public class 클래스명 - 클래스명 바꿀수 없음(소스파일명과 클래스명이 같아야한다.)
class 클래스명 - 클래스명 바꿀 수 있음

**클래스의 4가지 스타일(종류)**
1. VO(Value Object), DTO(Data Transfer Object) - 데이터 저장용(Entity Class)
- ex)	
	부서 : 영업부, 이름 : 김길동, 직급 : 대리
	부서 : 개발부, 이름 : 박길동, 직급 : 대리
2. Manager,DAO(Data Access Object) - VO에 대한 관리기능(CRUD : Create, Read, Update, Delete)
3. UI - 입출력 인터페이스(CUI, GUI, WebUI) 
4. IO - 데이터 입출력

객체생성과정
Person p1 = new Person();
1. 클래스 로딩 
2. 힙영역에 메모리 할당(객체생성)
3. 필드에 기본초기값 할당
4. 명시적 초기값 할당
5. 생성자 실행 

Singleton Pattern - 객체를 1개만 생성해야하는경우(private 생성자 사용)

자바 심화 공부
1. 이펙티브 자바(도서)
2. 리팩토링(도서)
3. 디자인패턴(도서)
4. 엔터프라이즈 디자인패턴(도서) 

생성자 오버로딩의 규칙
1. 이름 동일
2. 매개변수 다름(타입 또는 순서, 갯수)
	- 매개 변수 이름은 무관
	ex)
	 public Person()  // 매핑 - Person()
	 public Person(String name, int age) // 매핑 - Person_String_int()
	 public Person(String name2, int age2) // 매핑 - Person_String_int()
	 
Class는 Object의 Template이고
Object는 Class의 Instance이다.

static 메소드는 static 변수만 직접 접근 가능
- ex)
	class A{
		static int i = 0;
		static void a(){
			i++;
		}	
	}
static 메소드는 non-static변수는 직접접근불가
- ex)
	class A{
		int i = 0;
		static void a(){
			i++; //구문 오류 : static 메소드는 메소드 영역에 클래스가 로딩될때 생성되지만, i는 클래스가 로딩될때 없기때문에 불가능
		}	
	}





